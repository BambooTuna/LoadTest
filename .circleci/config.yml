# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo

    environment:
      SBT_VERSION: 1.2.8
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            - v1-dependencies-
      - run: cat /dev/null | sbt test:compile
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}
      - run: cat /dev/null | sbt test:test

  staging:
    docker:
      - image: hashicorp/terraform:0.12.6
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create gcp credential
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -d > ./account.json
          working_directory: ~/project/infrastructure/staging/gcp/terraform
      - run:
          name: init terraform
          command: |
            sh ./import.sh
          working_directory: ~/project/infrastructure/staging/gcp/terraform
      - run:
          name: plan terraform
          command: terraform plan -var-file=../gcloud-env
          working_directory: ~/project/infrastructure/staging/gcp/terraform
      - run:
          name: apply terraform
          command: terraform apply -auto-approve -var-file=../gcloud-env
          working_directory: ~/project/infrastructure/staging/gcp/terraform

  push:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      SBT_VERSION: 1.2.8
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Create gcp credential
          command: |
            echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/account.json
      - run:
          name: Login docker
          command: |
            cat ${HOME}/account.json | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Docker build and push
          command: |
            . ~/project/infrastructure/staging/gcp/gcloud-env
            export APP_IMAGE="cyberagenthack/adtech-compe-2019-d-loadtest"
            export IMAGE_NAME=gcr.io/${GOOGLE_PROJECT_ID}/${APP_IMAGE}

            export GATLING_IMAGE="cyberagenthack/gatling-runner"
            export GATLING_IMAGE_NAME=gcr.io/${GOOGLE_PROJECT_ID}/${GATLING_IMAGE}

            sbt docker:publishLocal

            export LOCAL_CREDENTIAL_PATH=${HOME}/account.json
            sbt gatling-runner/docker:publishLocal

            docker tag ${APP_IMAGE}:latest ${IMAGE_NAME}:${CIRCLE_SHA1}
            docker push ${IMAGE_NAME}

            docker tag ${GATLING_IMAGE}:latest ${GATLING_IMAGE_NAME}:${CIRCLE_SHA1}
            docker push ${GATLING_IMAGE_NAME}

            cd tools/mysql
            docker build . -t gcr.io/${GOOGLE_PROJECT_ID}/mysql:${CIRCLE_SHA1}
            docker push gcr.io/${GOOGLE_PROJECT_ID}/mysql:${CIRCLE_SHA1}

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install helm
          command: |
            curl https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz | tar zx linux-amd64/helm
            mv linux-amd64/helm /usr/local/bin/helm; rm -rf linux-amd64
      - run:
          name: Deploy to GKE
          command: |
            . ~/project/infrastructure/staging/gcp/gcloud-env

            export DOCKER_TAG="cyberagenthack/adtech-compe-2019-d-loadtest"
            export IMAGE_NAME=gcr.io/${GOOGLE_PROJECT_ID}/${DOCKER_TAG}:${CIRCLE_SHA1}

            export GATLING_IMAGE="cyberagenthack/gatling-runner"
            export GATLING_IMAGE_NAME=gcr.io/${GOOGLE_PROJECT_ID}/${GATLING_IMAGE}:${CIRCLE_SHA1}

            export DB_IMAGE=gcr.io/${GOOGLE_PROJECT_ID}/mysql
            export DB_TAG=${CIRCLE_SHA1}

            echo $GCLOUD_SERVICE_KEY | base64 -d > ${HOME}/account.json
            gcloud auth activate-service-account --key-file ${HOME}/account.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/region $GOOGLE_COMPUTE_REGION
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud --quiet container clusters get-credentials $GOOGLE_CLUSTER_NAME

            cd ~/project/infrastructure/staging/gcp/k8s
            sh ./setup-k8s.sh

#            gcloud --quiet container clusters get-credentials gatling-runner-cluster
#            sed -i -e 's!GATLING_IMAGE_NAME!'${GATLING_IMAGE_NAME}'!' ./gatling-job.yml
#            kubectl apply -f ./gatling-job.yml

workflows:
  version: 2
  build-n-deploy:
    jobs:
#      - build:
#          filters:
#            tags:
#              only: /.*/
#      - staging:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - develop
#                - /feature\/develop\/.+/
      - push:
          requires:
            - staging
          filters:
            branches:
              only:
                - develop
                - /feature\/develop\/.+/
      - deploy:
          requires:
            - push
          filters:
            branches:
              only:
                - develop
                - /feature\/develop\/.+/
